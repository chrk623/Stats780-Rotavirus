/* Macro Functions */
%MACRO createTableOfRates(denomFile,
	whichDenom,
	userCnd,
	dataName = work.toReturn,
	analysisDataset = NHI_Merge,
	ageBandIgnore = "FALSE"
	);

	/* Import the data. */
	PROC IMPORT DATAFILE = &denomFile OUT = Denominators DBMS = csv REPLACE;
		GETNAMES = YES;
		DATAROW = 2;
		GUESSINGROWS = 1000;
	RUN;

	/* Acquire the maximum number of hospitalisation entries generated by the adminDatabaseMerge macro. */
	PROC SQL NOPRINT;
		SELECT max(numOfHosEntries)
		INTO :maxHos SEPARATED BY ' '
		FROM NHI_merge;
	QUIT;

	/* Set up the denominator file to extract what we want. */
	DATA base;
		SET Denominators;
		LENGTH Event $24.;
		IF DenomType = "&whichDenom" THEN DO;
			DO Event = "Bronchiolitis",  "Rotavirus", "Intussusception";
				IF Event = "Bronchiolitis" AND AgeBand = "0-72" THEN OUTPUT;
				IF Event = "Rotavirus" AND AgeBand = "0-72" THEN OUTPUT;
				IF Event = "Intussusception" AND AgeBand = "0-36" THEN OUTPUT;
			END;
		END;
	/* Sort the data by event to improve the speed of the PROC SQL read. */
	PROC SORT DATA = base;
		BY Event;
	/* Create the SAS database to return to the user. */
	DATA &dataName;
		SET base;
		Numer = .;
	RUN;

	/* Store the number of rows in the reduced denominator file. */
	PROC SQL NOPRINT;
		SELECT COUNT(*)
		INTO :maxRowsInBase SEPARATED BY ' '
		FROM base;
	QUIT;

	/* For each row in the reduced denominator file: */
	%LET previousEvent = ' ';
	%DO currentBaseRow = 1 %TO &maxRowsInBase;
		/* Which event are we currently up to? */
		DATA rowData;
			SET base;
			IF _N_ = &currentBaseRow THEN DO;
				CALL SYMPUT('whichEvent', Event);
				OUTPUT;
			END;
		RUN;

		/* If the current event is not equal to the previous event, reload the analysis dataset filtered by the event. */
		%IF ("&whichEvent" NE &previousEvent) %THEN %DO;
			PROC SQL NOPRINT;
				CREATE TABLE rowNumerator AS
				SELECT NHI.*, "&whichEvent" AS Event
				FROM &analysisDataset AS NHI
				WHERE
					%DO i = 1 %TO &maxHos;
						NHI.event_&i CONTAINS "&whichEvent"
						%IF &i NE &maxHos %THEN OR;
					%END;
				;
			QUIT;
		%END;

		/* Create an indicator variable meets three conditions: 		 */
		/*	- The event of interest.									 */
		/*	- The numerator is calculated from the age band of interest. */
		/*	- Any other user specificed conditions.						 */
		PROC SQL NOPRINT;
			CREATE TABLE rowToPrep AS
			SELECT NHI.MASTER_HCU_ID,
				%DO i = 1 %TO &maxHos;
					(CASE 
						WHEN 
							event_&i = "&whichEvent" AND &userCnd
							%IF &AgeBandIgnore = "FALSE" %THEN %DO;
								%IF rowInfo.AgeBand = '0-72' %THEN %DO;
									AND ageOfAdmission_&i LE 72
								%END; %ELSE %DO;
									AND ageOfAdmission_&i LE 36
								%END;
							%END;
						THEN 1
                		ELSE 0
	                END) AS eventOb_&i
					%IF &i NE &maxHos %THEN ,;
				%END;
			FROM rowNumerator AS NHI
			LEFT JOIN rowData AS rowInfo
				ON NHI.Event = rowInfo.Event
			ORDER BY MASTER_HCU_ID;
		QUIT;

		/* Row sum the indicator variables. */
		DATA rowToCalculate;
			SET rowToPrep;
			rowSum = SUM(OF eventOb_1 - eventOb_&maxHos);
		RUN;

		/* Column sum the indicator variable row sum and load it into a macro variable. */
		PROC SQL NOPRINT;
			SELECT SUM(rowSum)
			INTO :numerator SEPARATED BY ' '
			FROM rowToCalculate;
		QUIT;

		/* Then, load the numerator and calculate the rate etc. into the SAS database to return to the user. */
		DATA &dataName;
			SET &dataName;
			IF _N_ = &currentBaseRow THEN DO;
				Numer = &numerator;
				Rate = (Numer/Denom)*100000;
				IF Rate NE 0 THEN DO;
					Lower_95CI = (100000/Denom)*(SQRT(Numer)-1)**2;
					Upper_95CI = (100000/Denom)*(SQRT(Numer)+1)**2;
				END; ELSE DO;
					Lower_95CI = 0;
					Upper_95CI = 100000*(3/Denom);
				END;
				RateString = CATX(" ", TRIM(LEFT(PUT(Rate, 7.0))), CAT("(", TRIM(LEFT(PUT(Lower_95CI, 7.0))), ","), CAT(TRIM(LEFT(PUT(Upper_95CI, 7.0))), ")"));			END;
		RUN;

		%LET previousEvent = "&whichEvent";
	%END;

	PROC SQL NOPRINT;
		DROP TABLE base, rowData, rowNumerator, rowToPrep, rowToCalculate;
	QUIT;

%MEND createTableOfRates;

%MACRO cleanTableOutput(tableOfRates, by, escapeChar = ^);
	ODS RTF file = "&by..rtf";
	ODS ESCAPECHAR = "&escapeChar";

	/* Years */
	DATA toOutput;
		SET &tableOfRates (KEEP = DenomType DenomSubTypeLabel Event RateString);
	PROC SORT data = toOutput;
		BY DenomSubTypeLabel;
	PROC TRANSPOSE data = toOutput out = toOutput;
		BY DenomSubTypeLabel;
		VAR RateString;
		ID Event;
	PROC REPORT data = toOutput
		NOWD
		STYLE(report)=[rules = groups frame = below bordercolor = black]
	 	STYLE(header)=[background = _undef_ bordertopcolor = black just = l]; 

		COMPUTE BEFORE _PAGE_ / STYLE = [just = c font_weight = bold font_size = 4];
			LINE "Rates of Hospitalisation per 100,000 children aged 0 – 72 months old";
			LINE "by &by";
		ENDCOMP;

		COLUMN DenomSubTypeLabel Bronchiolitis Intussusception Rotavirus;
		DEFINE DenomSubTypeLabel / "&by";
		DEFINE Bronchiolitis/ "Bronchiolitis";
		DEFINE Intussusception / "Intussusception&escapeChar{super 1}";
		DEFINE Rotavirus / "Rotavirus";

		COMPUTE AFTER / STYLE = [just = l bordertopcolor = black font_size = 2];
			line "&escapeChar{super 1} Intussusception Rates are for children aged 0 – 36 months only.";
			line "Rates and their confidence intervals rounded to 0 decimal places.";
			line " ";
			line "Created %sysfunc(datetime(),datetime14.) by &filepath\%sysget(SAS_EXECFILENAME). SAS Version: &sysver";
		ENDCOMP; 
	RUN;

	PROC SQL NOPRINT;
		DROP TABLE toOutput;
	QUIT;

	ODS RTF CLOSE;
%MEND cleanTableOutput;

%LET filepath = C:\Users\av3n1\Desktop\Stats 780;
%adminDatabaseMerge(filepath_to_databases = "C:\Users\av3n1\Desktop\Datasets For 780",
					   filepath_to_modules = "&filepath\Modules");

/* Year */
%createTableOfRates(denomFile = "&filepath\denomImport - Full.csv", 
	whichDenom = Year, 
	userCnd = (YEAR(EVSTDATE_&i) = INPUT(rowInfo.DenomSubTypeLabel, 4.0))
);

PROC EXPORT data = toReturn dbms = csv outfile = 'Year.csv' replace;
RUN;

%cleanTableOutput(tableOfRates = toReturn, by = Year);

/* Age Bands */
%createTableOfRates(denomFile = "&filepath\denomImport - Full.csv", 
	whichDenom = Age, 
	userCnd = (ageOfAdmission_&i BETWEEN LwrBnd AND UprBnd),
	AgeBandIgnore = "TRUE"
);

DATA toReturn;
	SET toReturn;
	IF RateString = ". (., .)" THEN RateString = " ";
PROC EXPORT data = toReturn dbms = csv outfile = 'Age.csv' replace;
RUN;

%cleanTableOutput(tableOfRates = toReturn, by = Age Band);

/* Ethnicity */
%createTableOfRates(denomFile = "&filepath\denomImport - Full.csv", 
	whichDenom = Ethnicity, 
	userCnd = (Ethnicity = rowInfo.DenomSubTypeLabel)
);

PROC EXPORT data = toReturn dbms = csv outfile = 'Ethnicity.csv' replace;
RUN;

%cleanTableOutput(tableOfRates = toReturn, by = Ethnicity);

/* Deprivation Index */
%createTableOfRates(denomFile = "&filepath\denomImport - Full.csv", 
	whichDenom = Deprivation Index, 
	userCnd = (Dep13 = INPUT(rowInfo.DenomSubTypeLabel, 2.0))
);

DATA toReturn;
	SET toReturn;
	DenomSubTypeLabel = INPUT(DenomSubTypeLabel, 2.0);
PROC EXPORT data = toReturn dbms = csv outfile = 'Deprivation.csv' replace;
RUN;

%cleanTableOutput(tableOfRates = toReturn, by = Deprivation Index);

/* District Health Board */
%createTableOfRates(denomFile = "&filepath\denomImport - Full.csv", 
	whichDenom = District Health Board, 
	userCnd = (DHBoard = rowInfo.DenomSubTypeLabel)
);

PROC EXPORT data = toReturn dbms = csv outfile = 'District.csv' replace;
RUN;

%cleanTableOutput(tableOfRates = toReturn, by = District Health Board);
